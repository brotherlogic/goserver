// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package goserver

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// GoserverServiceClient is the client API for GoserverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoserverServiceClient interface {
	IsAlive(ctx context.Context, in *Alive, opts ...grpc.CallOption) (*Alive, error)
	Mote(ctx context.Context, in *MoteRequest, opts ...grpc.CallOption) (*Empty, error)
	State(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerState, error)
	Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error)
	Reregister(ctx context.Context, in *ReregisterRequest, opts ...grpc.CallOption) (*ReregisterResponse, error)
	ChooseLead(ctx context.Context, in *ChooseLeadRequest, opts ...grpc.CallOption) (*ChooseLeadResponse, error)
}

type goserverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGoserverServiceClient(cc grpc.ClientConnInterface) GoserverServiceClient {
	return &goserverServiceClient{cc}
}

func (c *goserverServiceClient) IsAlive(ctx context.Context, in *Alive, opts ...grpc.CallOption) (*Alive, error) {
	out := new(Alive)
	err := c.cc.Invoke(ctx, "/goserver.goserverService/IsAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goserverServiceClient) Mote(ctx context.Context, in *MoteRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/goserver.goserverService/Mote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goserverServiceClient) State(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ServerState, error) {
	out := new(ServerState)
	err := c.cc.Invoke(ctx, "/goserver.goserverService/State", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goserverServiceClient) Shutdown(ctx context.Context, in *ShutdownRequest, opts ...grpc.CallOption) (*ShutdownResponse, error) {
	out := new(ShutdownResponse)
	err := c.cc.Invoke(ctx, "/goserver.goserverService/Shutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goserverServiceClient) Reregister(ctx context.Context, in *ReregisterRequest, opts ...grpc.CallOption) (*ReregisterResponse, error) {
	out := new(ReregisterResponse)
	err := c.cc.Invoke(ctx, "/goserver.goserverService/Reregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goserverServiceClient) ChooseLead(ctx context.Context, in *ChooseLeadRequest, opts ...grpc.CallOption) (*ChooseLeadResponse, error) {
	out := new(ChooseLeadResponse)
	err := c.cc.Invoke(ctx, "/goserver.goserverService/ChooseLead", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoserverServiceServer is the server API for GoserverService service.
// All implementations should embed UnimplementedGoserverServiceServer
// for forward compatibility
type GoserverServiceServer interface {
	IsAlive(context.Context, *Alive) (*Alive, error)
	Mote(context.Context, *MoteRequest) (*Empty, error)
	State(context.Context, *Empty) (*ServerState, error)
	Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error)
	Reregister(context.Context, *ReregisterRequest) (*ReregisterResponse, error)
	ChooseLead(context.Context, *ChooseLeadRequest) (*ChooseLeadResponse, error)
}

// UnimplementedGoserverServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGoserverServiceServer struct {
}

func (UnimplementedGoserverServiceServer) IsAlive(context.Context, *Alive) (*Alive, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAlive not implemented")
}
func (UnimplementedGoserverServiceServer) Mote(context.Context, *MoteRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mote not implemented")
}
func (UnimplementedGoserverServiceServer) State(context.Context, *Empty) (*ServerState, error) {
	return nil, status.Errorf(codes.Unimplemented, "method State not implemented")
}
func (UnimplementedGoserverServiceServer) Shutdown(context.Context, *ShutdownRequest) (*ShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Shutdown not implemented")
}
func (UnimplementedGoserverServiceServer) Reregister(context.Context, *ReregisterRequest) (*ReregisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reregister not implemented")
}
func (UnimplementedGoserverServiceServer) ChooseLead(context.Context, *ChooseLeadRequest) (*ChooseLeadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChooseLead not implemented")
}

// UnsafeGoserverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoserverServiceServer will
// result in compilation errors.
type UnsafeGoserverServiceServer interface {
	mustEmbedUnimplementedGoserverServiceServer()
}

func RegisterGoserverServiceServer(s grpc.ServiceRegistrar, srv GoserverServiceServer) {
	s.RegisterService(&_GoserverService_serviceDesc, srv)
}

func _GoserverService_IsAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Alive)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoserverServiceServer).IsAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goserver.goserverService/IsAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoserverServiceServer).IsAlive(ctx, req.(*Alive))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoserverService_Mote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoserverServiceServer).Mote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goserver.goserverService/Mote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoserverServiceServer).Mote(ctx, req.(*MoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoserverService_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoserverServiceServer).State(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goserver.goserverService/State",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoserverServiceServer).State(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoserverService_Shutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoserverServiceServer).Shutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goserver.goserverService/Shutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoserverServiceServer).Shutdown(ctx, req.(*ShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoserverService_Reregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoserverServiceServer).Reregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goserver.goserverService/Reregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoserverServiceServer).Reregister(ctx, req.(*ReregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoserverService_ChooseLead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChooseLeadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoserverServiceServer).ChooseLead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goserver.goserverService/ChooseLead",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoserverServiceServer).ChooseLead(ctx, req.(*ChooseLeadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoserverService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goserver.goserverService",
	HandlerType: (*GoserverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAlive",
			Handler:    _GoserverService_IsAlive_Handler,
		},
		{
			MethodName: "Mote",
			Handler:    _GoserverService_Mote_Handler,
		},
		{
			MethodName: "State",
			Handler:    _GoserverService_State_Handler,
		},
		{
			MethodName: "Shutdown",
			Handler:    _GoserverService_Shutdown_Handler,
		},
		{
			MethodName: "Reregister",
			Handler:    _GoserverService_Reregister_Handler,
		},
		{
			MethodName: "ChooseLead",
			Handler:    _GoserverService_ChooseLead_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "goserver.proto",
}
