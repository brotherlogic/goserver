// Code generated by protoc-gen-go.
// source: server.proto
// DO NOT EDIT!

/*
Package goserver is a generated protocol buffer package.

It is generated from these files:
	server.proto

It has these top-level messages:
	Alive
*/
package goserver

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Alive struct {
}

func (m *Alive) Reset()                    { *m = Alive{} }
func (m *Alive) String() string            { return proto.CompactTextString(m) }
func (*Alive) ProtoMessage()               {}
func (*Alive) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*Alive)(nil), "goserver.Alive")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GoserverService service

type GoserverServiceClient interface {
	IsAlive(ctx context.Context, in *Alive, opts ...grpc.CallOption) (*Alive, error)
}

type goserverServiceClient struct {
	cc *grpc.ClientConn
}

func NewGoserverServiceClient(cc *grpc.ClientConn) GoserverServiceClient {
	return &goserverServiceClient{cc}
}

func (c *goserverServiceClient) IsAlive(ctx context.Context, in *Alive, opts ...grpc.CallOption) (*Alive, error) {
	out := new(Alive)
	err := grpc.Invoke(ctx, "/goserver.goserverService/IsAlive", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GoserverService service

type GoserverServiceServer interface {
	IsAlive(context.Context, *Alive) (*Alive, error)
}

func RegisterGoserverServiceServer(s *grpc.Server, srv GoserverServiceServer) {
	s.RegisterService(&_GoserverService_serviceDesc, srv)
}

func _GoserverService_IsAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Alive)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoserverServiceServer).IsAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/goserver.goserverService/IsAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoserverServiceServer).IsAlive(ctx, req.(*Alive))
	}
	return interceptor(ctx, in, info, handler)
}

var _GoserverService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "goserver.goserverService",
	HandlerType: (*GoserverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsAlive",
			Handler:    _GoserverService_IsAlive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 90 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x48, 0xcf, 0x87, 0xf0, 0x95, 0xd8,
	0xb9, 0x58, 0x1d, 0x73, 0x32, 0xcb, 0x52, 0x8d, 0x1c, 0xb8, 0xf8, 0x61, 0x82, 0xc1, 0x40, 0x32,
	0x33, 0x39, 0x55, 0x48, 0x97, 0x8b, 0xdd, 0xb3, 0x18, 0x2c, 0x2b, 0xc4, 0xaf, 0x07, 0x93, 0xd4,
	0x03, 0x0b, 0x48, 0xa1, 0x0b, 0x28, 0x31, 0x24, 0xb1, 0x81, 0xcd, 0x36, 0x06, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x67, 0x69, 0xc1, 0x25, 0x6b, 0x00, 0x00, 0x00,
}
